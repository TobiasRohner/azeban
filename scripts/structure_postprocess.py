#!/usr/bin/env python3

import sys
import os
import argparse
import numpy as np
import netCDF4 as nc



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Post-Processing for output generated by the alsvinn structure standalone')
    parser.add_argument('--input', type=str, required=True)
    parser.add_argument('--output', type=str, required=True)
    parser.add_argument('--nx', type=int, required=True)
    parser.add_argument('--ny', type=int, required=True)
    parser.add_argument('--nz', type=int, default=1)
    parser.add_argument('-p', type=float, required=True)
    args = parser.parse_args(sys.argv[1:])

    dim = 2 if args.nz == 1 else 3
    with nc.Dataset(args.input, 'r', format='NETCDF4') as f:
        s = f['u'][:]
        s += f['v'][:]
        if dim > 2:
            s += f['w'][:]
        N = s.size
        for h in range(1, N):
            s[h] += s[h-1]
        for h in range(N):
            s[h] /= (2*h+1)**dim
        s = s**(1./args.p)
        with nc.Dataset(args.output, 'w', format='NETCDF4') as o:
            o.createDimension('N', N)
            var_h = o.createVariable('h', float, ('N',))
            var_s = o.createVariable('s', float, ('N',))
            var_h[:] = np.arange(N) / args.nx
            var_s[:] = s
